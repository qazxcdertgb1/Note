封装: 将程序分成多个块，每个块只向外暴露一部分稳定的部分用于与外部交互，其余部分只允许内部交互。
		可以很方便地更改内部代码且不影响其他程序调用该块。

继承: 继承父类的子类可以拥有父类除 被private修饰的成员 和 构造函数 外的所有内容，能增加代码复用性、扩展性和规范性。
		子类可以覆盖或重写父类函数。
		
多态: 父类的引用指向了子类的对象，即子类的类型提升，向上转型。该引用也可以向下转型为子类类型。若是直接用父类的引用声明父类对象，该引用不能向下转型为子类。函数重载也是多态的一种。前提: 类与类之间必须有关系，要么是继承，要么是实现。通常还有一个前提：存在覆盖。
多态提高了代码的扩展性。
弊端: 只能使用父类的引用访问父类中的成员。
在编译时期：参阅引用型变量所属的类中是否有调用的方法（ 通常就是看等号右边）。如果有，编译通过，如果没有编译失败。
在运行时期：参阅对象所属的类中是否有调用的方法。  （也就是看new 产生的是哪个类的对象  通常就是看等号右边）
简单总结就是：成员函数在多态调用时，编译看左边，运行看右边。
在多态中，成员变量的特点：无论编译和运行，都参考左边(引用型变量所属的类)。
在多态中，静态成员函数的特点：无论编译和运行，都参考做左边。


有限状态机: 表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型，通过一个变量存储当前状态来反映从系统开始到现在时刻的输入变化，并根据当前的状态来执行对应的步奏。一般用switch case来判断切换状态。

常见排序算法:
选择排序: 以某一端为起点，遍历查找最值元素，并将其与第一元素交换，然后将起点后移一位，接下来一直重复直到起点移动到最后一位时排序结束。
冒泡排序: 对相邻的两个数进行比较，将较小的数调到前面，需要进行 arr.length-1 趟比较，每趟进行 arr.length-趟数 次比较。

普通类: 用来描述对象，内部由成员组成，成员包括变量(字段)和方法(函数)，使用成员必须通过调用类的对象。
抽象类: 将多个事物共性的，本质的内容抽取出来形成的类。
区别: 抽象类可以定义没有方法体的方法，其具体实现由子类完成。包含抽象方法的类就是抽象类。子类必须实现所有抽象父类内的抽象方法。抽象类不能创建对象。

实现单例模式: 将内部成员私有化，并对外暴露一个方法。定义一个变量储存自身引用，并由该方法返回。单例设计模式又分为饿汉式和懒汉式。
饿汉式: 初始化时便生成引用，方法被调用时直接返回引用。
懒汉式: 初始化时不生成自身引用，当公开方法被调用时再生成引用。在多线程中可能会因为多个线程同时访问而生成多个引用，可用线程锁解决。
